ClassDiagram {
    class Game{
        _players:list
        _builders:list
        _builder_index:int
        _phase:str
        _background:str
        _collision_director:CollisionDirector
        _gravity_director:GravityDirector
        object:list
        running:bool
        
        __init__(self, pygame_screen:pygame.Surface, time_between_frame:float, zero_vector:tuple, unit_size:int, background:str)
        add_tracks(self)
        reset(self)
        draw_tracks(self)
        alive(self)
        run_build(self)
        run_battle(self, collision_delay, COLLISION_DELAY_MAX)
        run_end(self)
        run(self)
        add_players(self, player1:ControllableMechansim, player2:ControllableMechansim)
        build_players(self)
        get_player(self, index:int)
        add_object(self, object)
        remove_object(self, object)
        get_phase(self)
        set_phase(self, phase:str)
        is_valid(self, instruction)
        act(self, player: ControllableMechansim, action: str)
        __draw_blocks(self, zero_vector: tuple, unit_size: int)
        __build_key_events(self, key)
        __battle_key_events(self)
        __collision_events(self, collision_report)
        change_normalized_into_real(zero_vector: tuple, unit_size: int, target_vector: tuple)
    }

    class GravityDirector{
        __init__(self, mass:float, loc:tuple, time_between_frame:float)
        add_gravity(self, player:BlockMechanism)
        set_mass(self, mass:float)
        get_mass(self)
    }

    class CollisionDirector{
        detect_and_effect_collision(self,block_mechanism_1:BlockMechanism, block_mechanism_2:BlockMechanism, time_between_frame:float)
        block_collide_data(self, block1:Block, block2:Block)
        is_node_in_block(self, node:tuple, block:Block)
        _normal_vector_for_impactor(self, impact_line, hit_line)
        _array_to_tuple(self, arr)
        _detect_crossover(self, line1:tuple, line2:tuple)
        _cal_collision_impluse(self, momentum1:tuple, momentum2:tuple, angular_momentum1:float, angular_momentum2:float, mass1:float, mass2:float, normal_vector:np.ndarray, e:float)
    }

    
}

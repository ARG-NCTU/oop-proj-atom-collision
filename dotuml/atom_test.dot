ClassDiagram{
//==============
    class Agent{
        blocks: list
        boost: bool
        speed

        __init__(self, blocks: list)
        block_num(self)
        total_hp(self)
        core_hp(self)
        alive(self)
        damaged(self, damage: list)
        move_x(self, right: bool)
        move_y(self, down: bool)
        attack(self, arm_type: str)
    }
//=============
// import GameState
    class minimaxAgent{
        _index: int
        _depth: str
        _oppo: int

        __init__(self, index: int, depth: string)
        eval(self, gameState: GameState)
        get_legal_action(self)
        getAction(self, gameState)
    }
//============
        //from leaf_blocks import CoreBlock
        //import leaf_blocks as lb
        //from defense_block import DefenseBlock
    class BlockAssembly{
        _core: CoreBlock
        _size: int
        _oppo: BlockAssembly
        _blocks: dict
        _block_neighbor: dict

        // use CoreBlock, DefenseBlock
        __init__(self, core_block: CoreBlock)
        remove_block(self,block)
        is_valid(self,block: DefenseBlock, visited:dict)
        render(self, screen, zero_vector:tuple, unit_size:int)
        add_block(self, block: DefenseBlock, core: bool)
        set_oppo(self, player)
        get_blocks(self): dict
        get_block(self, coor: tuple): DefenseBlock
        get_able(self, coor: tuple): bool
        get_neighbors_block(self,block): list
        get_neighbors(self, coor: tuple): list
        add_blocks(self, coordinate_block: dict)
        build(self): DefenseBlock
        get_coor(self): tuple
        attack(self, arm_type)
    }
    

//===========
        //from block_assembly import BlockAssembly
        //from leaf_blocks import CoreBlock
        //import numpy as np
    class BlockMechanism{//inherit from BlockAssembly
        _momentum: tuple
        _angular_momentum: int
        _momentum_of_inertia: int
        _mass: int
        _center_of_mass_coor: tuple

        __init__(self, core_block: CoreBlock, momentum: tuple)
        render(self, screen, zero_vector:tuple, unit_size:int, is_debugging: bool, debug_color)
        add_force(self, force:tuple, location:tuple, time_between_frame:float)
        get_center_of_mass_coor(self)
        get_mass(self)
        get_momentum(self)
        get_angular_momentum(self)
        move_by_physics(self, time_between_frame:float)
        move_to(self, coor:tuple)
        __update_mass(self)
        __update_center_of_mass_coor(self)
        __update_momentum_of_inertia(self)
        __update_properties(self)
    }
    
//==========
        //from skin_bone import SkinBone
        //import pygame
        //import numpy as np
        //import copy
    class Block{ //inherit by SkinBone
        _hp: int
        _visible: bool
        _block_size: int
        _color: tuple
        _mass: int
        _coor: tuple
        _rotation: float
        _previous_coor: tuple
        
        __init__(self, center_point: tuple, hp: int, color: tuple, mass: int, visible)
        get_hp(self)
        set_hp(self, hp)
        damage_block(self, value)
        heal_block(self, value)
        get_previous_coor(self)
        get_left_top(self): tuple
        get_block_size(self): int
        get_coor(self): tuple
        get_mass(self): int
        set_coor(self, coor)
        move(self, dir_vector:tuple)
        rotate(self, pivot_point:tuple, theta:float)
        render(self, screen, zero_vector:tuple, unit_size:int, is_debugging: bool, debug_color: tuple)
    }
    
//===========
// import Block
    class CollisionDirector{
        detect_and_effect_collision(self, block_mechanism_1:BlockMechanism, block_mechanism_2:BlockMechanism, time_between_frame:float) //use BlockMechanism+2
        block_collide_data(self, block1:Block, block2:Block): tuple //use Block+2
        is_node_in_block(self, node:tuple, block:Block): bool //use Block+1
        _normal_vector_for_impactor(self, impact_line, hit_line): np.ndarray
        _array_to_tuple(self, arr)
        _detect_crossover(self, line1:tuple, line2:tuple): bool
        _cal_collision_impluse(self, momentum1:tuple, momentum2:tuple, angular_momentum1:float, angular_momentum2:float, mass1:float, mass2:float, normal_vector:np.ndarray, e:float): np.ndarray
    }
    

//==========
    class Color{
        CORE_COLOR: tuple
        STONE_COLOR: tuple
        DEBUGGING_COLOR: tuple
        BLOCK_COOR_COLOR: tuple
        MID_SCREEN_COLOR: tuple
        CENTER_OF_MASS_COLOR: tuple
        GRAVITY_PARTICLE_COLOR: tuple
        THRUSTER_PARTICLE_COLOR: tuple
        STRONGER_FORCE_FIELD_COLOR: tuple
        ENDLESS_FORCE_FIELD_COLOR: tuple
    }
//===========
        //from block_mechanism import BlockMechanism
        //from controllable_mechanism import ControllableMechansim
        //import pygame
        //import leaf_blocks as lb
    class ControllableMechansimBuilder{ // inherit BlockMechanism
        _cursor: tuple
        _block_type: str
        _total_coin: int
        _total_cost: int
        _core: CoreBlock

        __init__(self)
        set_costs(self)
        set_block_type(self,block_type:str)
        move_cursor(self,direction:str)
        add_block_dir(self, direction:str)
        delete_block(self)
        build(self): ControllableMechansim
        render(self, screen, zero_vector:tuple, unit_size:int, center:tuple)
    }
    

//=========
        //from block_mechanism import BlockMechanism
        //from leaf_blocks import CoreBlock
    class ControllableMechansim{
        _momentum: tuple
        _angular_momentum: float
        _momentum_of_inertia: float
        _mass: float
        _center_of_mass_coor: tuple
        _core: CoreBlock

        __init__(self, core_block: CoreBlock, momentum:tuple)
        core_move_up(self, time_between_frame:float)
        core_move_down(self, time_between_frame:float)
        core_move_left(self, time_between_frame:float)
        core_move_right(self, time_between_frame:float)
        total_hp(self): float
    }
    

//=========
        //from block import Block
        //import weapons as wp
        //import game_statistics as stat
    class DefenseBlock{ //inherit Block
        _status: int
        _max_hp: int
        _init_color: tuple
        _texture: str
        _arm: Weapon

        __init__(self, center_point: tuple, color: tuple, hp: int, mass: int, texture: str, arm, visible: bool, status: int)
        get_hp_ratio(self): float
        set_status(self)
        get_status(self)
        set_color(self)
        damage_block(self, value)
        break_animation(self)
        set_rotation(self, rotation: float)
        attack(self, opponent)
        get_arm(self)
        set_arm(self, arm_type: str)
    }
    

//=========
    class GameState{
        agents: Agent
        x_upper_bound: int
        x_lower_bound: int
        y_upper_bound: int
        y_lower_bound: int

        __init__(self)
        getLegalActions(self, agentIndex: int): list
        getNextState(self, gameState: GameState, action: tuple): GameState
        getNumAgents(self): int
        addAgents(self, agent)
        isEnd(self): bool
    }
    

//=========
//from controllable_mechanism import ControllableMechansim
//from controllable_mechanism_builder import ControllableMechansimBuilder
//from collision_director import CollisionDirector
//from gravity_director import GravityDirector
//from color import Color
//from sound import Sounds
//from particle_effect import GravityParticleEffect, ThrusterParticlesEffect
//import pygame
//import random
    class Actions{
        CORE_MOVE_UP
        CORE_MOVE_DOWN
        CORE_MOVE_LEFT 
        CORE_MOVE_RIGHT 
    }
    class Timing{
        PLAY_BGM_TIME 
        START_STRONG_FORCE_TIME 
        ENDLESS_FORCE_TIME 
    }
    class Game{
        _players: ControllableMechansim
        _builders: ControllableMechansimBuilder
        _builder_index: int
        _objects: object
        _phase: str
        _background: str
        _screen: pygame.Surface
        _collision_director: CollisionDirector
        _gravity_director: GravityDirector
        _time_between_frame: float
        _zero_vector: tuple
        _unit_size: int
        _origin_unit_size: int
        _running: bool
        _gravity_particle_effect: GravityParticleEffect
        _origin_hp: list
        _thruster_particle_effect: ThrusterParticlesEffect
        _player_thruster_particle_effect: dict
        _battle_time: int
        _tracks: List
        _track_length: int
        _track_colors: tuple
        _track_ratio: float

        __init__(self, pygame_screen: pygame.Surface, time_between_frame: float, zero_vector: tuple, unit_size: int, background: str)
        add_tracks(self)
        reset(self)
        draw_tracks(self)
        alive(self): tuple
        run_build(self)
        run_battle(self, collision_delay, COLLISION_DELAY_MAX)
        run_end(self)
        run(self)
        add_players(self, player1: ControllableMechansim, player2: ControllableMechansim)
        build_players(self)
        get_player(self, index: int)
        add_object(self, object)
        remove_object(self, object)
        get_phase(self)
        set_phase(self, phase: str)
        is_valid(self, instruction)
        act(self, player: ControllableMechansim, action: str)
        __draw_blocks(self, zero_vector: tuple, unit_size: int)
        __build_key_events(self, key)
        __battle_key_events(self)
        __collision_events(self, collision_report)
    }
    

//============
//from block_mechanism import BlockMechanism
    class GravityDirector{
        __init__(self, mass:float, loc:tuple, time_between_frame:float)
        add_gravity(self, player:BlockMechanism)
        set_mass(self, mass:float)
        get_mass(self)
    }
//============
//from defense_block import DefenseBlock
//from color import Color
    class WoodBlock{// inherit DefenseBlock
        __init__(self, center_point: tuple, arm, visible, status)
    }
    class StoneBlock{ // inherit DefenseBlock
        __init__(self, center_point: tuple, arm, visible, status)
    }
    class CoreBlock{ // inherit DefenseBlock
        __init__(self, center_point: tuple, visible: bool, status: int)
        set_arm(self, arm)
    }
//============
//import pygame
//import random
//from color import Color
    class GravityParticleEffect{
        __init__(self, max_radius:float, loc:tuple, width:float, color: Color.GRAVITY_PARTICLE_COLOR)
        set_width(self, width:float)
        set_color(self, color:tuple)
        render(self, screen, zero_vector:tuple, unit_size:float)
    }
    class ThrusterParticleEffect{
        __init__(self, particle_size:float, emit_loc:tuple, emit_velocity:tuple, lifetime:int)
        render(self, screen, zero_vector:tuple, unit_size:float): bool
    }
    class ThrusterParticlesEffect{
        __init__(self)
        emit(self, emit_loc:tuple, emit_velocity:tuple, error_tolerance:float, particle_size:float, emit_delay:float, lifetime:int)
        render(self, screen, zero_vector, unit_size)
    }
    
//=============
    class SkinBone{
        __init__(self, nodes_max_length)
        render(self, screen, color, debug_color: tuple)
        set_nodes(self, nodes:list, fill_nodes)
        add_node(self, node:tuple)
        get_previous_nodes(self)
        get_nodes(self)
        get_lines(self)
        _gen_lines(self)
        is_crossover(self): bool
        fill_nodes(self)
        _detect_crossover(self, line1:tuple, line2:tuple): bool
    }
//============
    class Sounds{
        mixer.init()
    }
//============
    class Weapon{
        __init__(self, statistic: dict, rotation: float, credit: str)
        set_dir(self, rotation)
        get_stat(self): dict
        buff_stat(self, stat_to_buff: dict)
        change_stat(self, stat_to_change: dict)
        attack(self)
        cool_down(self)
        find_hit(self, player, area: pygame.Rect)
        hit(self, block)
        attack_animation(self)
        render(self, screen)
    }
    class Sword{//inhert Weapon
        __init__(self, statistic: dict, rotation: float)
        get_attack_area(self, pos: tuple): pygame.Rect
        attack(self, opponent, pos: tuple)
        attack_animation(self)
    }
    class Hammer{//inhert Weapon
        __init__(self, statistic: dict, rotation: float)
        get_attack_area(self, pos: tuple): list
        attack(self, opponent, pos: tuple)
        attack_animation(self)
    }
    class Cannon{//inhert Weapon
        __init__(self, statistic: dict, rotation: float)
        attack(self, opponent, pos: tuple)
        attack_animation(self)
    }
    class Bullet{//inhert Weapon
        __init__(self, damage: float, pos: tuple, velocity: float, dir: tuple, radius: float, opponent, credit: str)
        move(self)
        get_attack_area(self): tuple
        intersects(self, rect: pygame.rect,  center: tuple, r: float)
        find_hit(self, player, area: tuple)
        hit(self, block)
        explode_animation(self)
    }

// a: Aggregation, c: Composition, g: inherit
//===============inherit=======================
    Sword -g-> Weapon;
    Hammer -g-> Weapon;
    Cannon -g-> Weapon;
    Bullet -g-> Weapon;

    WoodBlock -g-> DefenseBlock;
    CoreBlock -g-> DefenseBlock;
    StoneBlock -g-> DefenseBlock;

    DefenseBlock -g-> Block;
    Block -g-> SkinBone;

    BlockMechanism -g-> BlockAssembly;
    ControllableMechansimBuilder -g-> BlockMechanism;
//==============================================
//================Composition===================
    Game -c-> ControllableMechansim;
    Game -c-> ControllableMechansimBuilder;
    Game -c-> CollisionDirector;
    Game -c-> GravityDirector;
    Game -c-> GravityParticleEffect;
    Game -c-> ThrusterParticlesEffect;
    
    GameState -c-> Agent;
    DefenseBlock -c-> Weapon;
    BlockAssembly -c-> CoreBlock;
    ControllableMechansimBuilder -c-> CoreBlock;
    ControllableMechansim -c-> CoreBlock;

    ThrusterParticlesEffect -c-> ThrusterParticleEffect;
//==============================================

//==================Aggregation=================
    GravityParticleEffect -a-> Color;
    WoodBlock -a-> Color;
    StoneBlock -a-> Color;
    CoreBlock -a-> Color;
    DefenseBlock -a-> Color;
    minimaxAgent -a-> GameState
    CollisionDirector -a-> BlockMechanism;
    CollisionDirector -a-> Block;
    Game -a-> Sounds;
    Game -a-> Actions;
    Game -a-> Timing;
//==============================================
}
ClassDiagram{

    class Actions {
        CORE_MOVE_UP: string
        CORE_MOVE_DOWN: string
        CORE_MOVE_LEFT: string
        CORE_MOVE_RIGHT: string
    }

    class Timing {
        PLAY_BGM_TIME: int
        START_STRONG_FORCE_TIME: int
        ENDLESS_FORCE_TIME: int
    }

    class KeyGroups {
        ThrusterKeys: tuple
    }

    class Game {
        _players: list
        _builders: list
        _builder_index: int
        _objects: list
        _phase: str
        _background: str
        _screen: pygame.Surface
        _collision_director: CollisionDirector
        _gravity_director: GravityDirector
        _time_between_frame: float
        _zero_vector: tuple
        _unit_size: int
        _origin_unit_size: int
        _running: bool
        _gravity_particle_effect: GravityParticleEffect
        _origin_hp: list
        _thruster_particle_effect: ThrusterParticlesEffect
        _player_thruster_particle_effect: dict
        _battle_time: int
        _tracks: list
        _track_length: int
        _track_colors: tuple
        _track_ratio: float
        
        __init__(pygame_screen: pygame.Surface, time_between_frame: float, zero_vector: tuple, unit_size: int, background: str): void
        add_tracks(): void
        reset(): void
        draw_tracks(): void
        alive(): tuple
        run_build(): void
        run_battle(collision_delay: int, COLLISION_DELAY_MAX: int): void
        run_end(): void
        run(): void
        add_players(player1: ControllableMechansim, player2: ControllableMechansim): void
        build_players(): void
        get_player(index: int): ControllableMechansim
        add_object(object): void
        remove_object(object): void
        get_phase(): str
        set_phase(phase: str): void
        is_valid(instruction): bool
        act(player: ControllableMechansim, action: str): void
        __draw_blocks(zero_vector: tuple, unit_size: int): void
        __build_key_events(key): void
        __battle_key_events(): void
        __collision_events(collision_report): void
    }

    class GameState {
        agents: list
        x_upper_bound: int
        x_lower_bound: int
        y_upper_bound: int
        y_lower_bound: int
        __init__(): void
        getLegalActions(agentIndex: int): list
        getNextState(gameState: GameState, action: tuple): GameState
        getNumAgents(): int
        addAgents(agent): void
        isEnd(): bool
    }

    class ControllableMechansim {
        __init__(core_block: CoreBlock, momentum: tuple): void
        core_move_up(time_between_frame: float): void
        core_move_down(time_between_frame: float): void
        core_move_left(time_between_frame: float): void
        core_move_right(time_between_frame: float): void
        total_hp(): float
    }


    class CollisionDirector {
        detect_and_effect_collision(obj1: ControllableMechansim, obj2: ControllableMechansim, time_between_frame: float): CollisionReport
    }

    class GravityParticleEffect {
        set_color(color: tuple): void
        set_width(width: int): void
        render(screen: pygame.Surface, zero_vector: tuple, unit_size: int): void
    }

    class ControllableMechansimBuilder {
        _cursor: tuple
        _block_type: str
        _total_coin: int
        _total_cost: int
        
        __init__(): void
        set_costs(): void
        set_block_type(block_type: str): void
        move_cursor(direction: str): void
        add_block_dir(direction: str): void
        delete_block(): void
        build(): ControllableMechansim
        render(screen, zero_vector: tuple, unit_size: int, center: tuple): void
    }

    class GravityDirector {
        __mass: float
        __loc: tuple
        __time_between_frame: float
        
        __init__(mass: float, loc: tuple, time_between_frame: float): void
        add_gravity(player: BlockMechanism): void
        set_mass(mass: float): void
        get_mass(): float
    }

    class DefenseBlock {
        _status: int
        _max_hp: int
        _init_color: tuple
        _texture: str
        _arm: Arm
        _rotation: float
        __init__(center_point: tuple, color: tuple, hp: int, mass: int, texture: str, arm: Arm, visible: bool, status: int): void
        get_hp_ratio(): float
        set_status(): void
        get_status(): int
        set_color(): void
        damage_block(value: int): void
        break_animation(): void
        set_rotation(rotation: float): void
        attack(opponent: object): void
        get_arm(): Arm
        set_arm(arm_type: str): void
    }


    class WoodBlock {
        _max_hp: int
        _mass: int
        _init_color: tuple
        __init__(center_point: tuple, arm: object, visible: bool, status: int)
    }

    class StoneBlock {
        _max_hp: int
        _mass: int
        _init_color: tuple
        __init__(center_point: tuple, arm: object, visible: bool, status: int)
    }

    class CoreBlock {
        __init__(center_point: tuple, visible: bool, status: int)
        set_arm(arm: object): void
    }

    

    class Arm {

    }

    class ThrusterParticleEffect {
        __particle_size: float
        __emit_loc: tuple
        __emit_velocity: tuple
        __lifetime: int
        __particle_loc: tuple
        __init__(particle_size: float, emit_loc: tuple, emit_velocity: tuple, lifetime: int)
        render(screen, zero_vector: tuple, unit_size: float): bool
    }

    class ThrusterParticlesEffect {
        __particles: list
        __current_emit_delay: int
        emit(emit_loc: tuple, emit_velocity: tuple, error_tolerance: float, particle_size: float, emit_delay: float, lifetime: int): void
        render(screen, zero_vector, unit_size): void
    }


    class SkinBone {
        _previous_nodes: list
        nodes: list
        lines: list
        nodes_max_length: int
        __init__(nodes_max_length: int)
        render(screen, color, debug_color): void
        set_nodes(nodes: list, fill_nodes: bool): void
        add_node(node: tuple): void
        get_previous_nodes(): list
        get_nodes(): list
        get_lines(): list
        fill_nodes(): void
        is_crossover(): bool
        _gen_lines(): void
        _detect_crossover(line1: tuple, line2: tuple): bool
    }


    class Weapon {
        _statistic: dict
        _available: bool
        _credit: str
        __init__(statistic: dict, rotation: float, credit: str): void
        set_dir(rotation: float): void
        get_stat(): dict
        buff_stat(stat_to_buff: dict): void
        change_stat(stat_to_change: dict): void
        attack(): void
        cool_down(): void
        find_hit(player, area: pygame.Rect): Block
        hit(block: Block): void
        attack_animation(): void
        render(screen): void
    }

    class Sword {
        credit: str
        __init__(statistic: dict, rotation: float): void
        get_attack_area(pos: tuple): pygame.Rect
        attack(opponent, pos: tuple): void
        attack_animation(): void
    }

    class Hammer {
        credit: str
        __init__(statistic: dict, rotation: float): void
        get_attack_area(pos: tuple): list
        attack(opponent, pos: tuple): void
        attack_animation(): void
    }

    class Cannon {
        credit: str
        __init__(statistic: dict, rotation: float): void
        attack(opponent, pos: tuple): void
        attack_animation(): void
    }

    class Bullet {
        _damage: float
        _pos: list
        _velocity: float
        _dir: tuple
        _radius: float
        _opponent
        _credit: str
        __init__(damage: float, pos: tuple, velocity: float, dir: tuple, radius: float, opponent, credit: str): void
        move(): void
        get_attack_area(): tuple
        intersects(rect: pygame.Rect, center: tuple, r: float): bool
        find_hit(player, area: tuple): Block
        hit(block: Block): void
        explode_animation(): void
    }

    class Color{}


    Weapon --> Sword;
    Weapon --> Hammer;
    Weapon --> Cannon;




    
    GravityParticleEffect --> Color;
    ThrusterParticleEffect --> Color;
    ThrusterParticlesEffect --> ThrusterParticleEffect;
    DefenseBlock -- Arm;
    Arm --> Sword;
    Arm --> Hammer;
    Arm --> Cannon;
    WoodBlock --> DefenseBlock;
    StoneBlock --> DefenseBlock;
    CoreBlock --> DefenseBlock;

}
